## read table name to update >> update_table
while true; do
        echo "Choose the Table You Want to update"
        read update_table
        test_update_table=$(check_name "$update_table")
        if [ $test_update_table -eq "1" ]; then
                echo "Naming Error please Enter only English Alphapet"; continue
        elif [ ! -f "$update_table" ]; then
                echo "Table Does Not Exists!!!!"; continue
        else
                break
        fi
done

## getting table meta

# get the number of columns in table
columns_number=$(awk -F: '{ print NF; exit }' $update_table.meta)
#echo "you table colnum is $columns_number"

# get the columns names
columns_names=($(awk -F ':' 'NR==1 {for (i=1; i<=NF; i++) print $i}' $update_table.meta))

# Populate the column_types array to check constrains 
column_types=($(awk -F: 'NR==2{
    for(i=1; i<=NF; i++) {
        if($i % 2 == 0)
            printf "string ";
        else
            printf "integer ";
    }
    exit
}' $update_table.meta))

# Populate the Primary_columns array to fetch the pk_columns from table 
primary_columns=($(awk -F: 'NR==2 {
    for (i=1; i <= NF; i++) {
        if($i > 2) {
            printf "%d ", i;
        }
    }
    exit
}' "$update_table.meta"))

# take the columns the user want to update based on
# define an array for users select columns

update_columns_names=()

while true; do
        echo "Enter The Number of Columns you want to Update based on"
        read user_columns_number
        test_columns_number=$(only_numbers "$user_columns_number")
        if [ $test_columns_number -eq "0" ] && [ "$user_columns_number" -gt "0" ] && [ "$user_columns_number" -le "$columns_number" ]; then
                for i in $(seq 1 $user_columns_number);
                do
                        while true; do 
                        echo "Enter name from Your columns name"
                        echo "${columns_names[@]}"
                        read -p "Enter $i column name " v
                        x=$v
                        # check column exists
                        result_inarray=$(in_array "$v" "${columns_names[@]}")
                        if [ "$result_inarray" -eq "0" ]; then
                                if [ $(check_name "$x") -eq "0" ]; then
                                        update_columns_names+=("$x")
                                        break
                                fi
                        else
                                echo "Wrong Input Please Try again."
                                continue
                        fi
                        break
                        done
                done
        else
                echo "Error Number of columns Issue!! make sure it is positive and less than oe equals your original table columns"
                continue
        fi
        break
done

#echo "${update_columns_names[@]}"

# get the update columns meta data
# Populate the column_types array to check constrains 

# Convert the Bash array to a comma-separated string
update_columns_names_string=$(IFS=,; echo "${update_columns_names[*]}")
# Use the converted string in the AWK script
update_column_number=($(awk -F: -v update_cols="$update_columns_names_string" '
    BEGIN {
        n = split(update_cols, update_cols_array, ",");
        for (i = 1; i <= n; i++) {
            update_cols_lookup[update_cols_array[i]] = 1;
        }
    }
    NR == 1 {
        for (i = 1; i <= NF; i++) {
            if ($i in update_cols_lookup) {
                printf "%d ", i;
            }
        }
        exit;
    } ' $update_table.meta))
 # echo "${update_column_number[@]}"

# Convert the Bash array to a comma-separated string
update_column_number_string=$(IFS=,; echo "${update_column_number[*]}")
# get user specific columns datatybe
update_column_types=($(awk -F: -v update_cols_num="$update_column_number_string" '
    BEGIN {
        n = split(update_cols_num, update_cols_array, ",");
        for (i = 1; i <= n; i++) {
            update_cols_lookup[update_cols_array[i]] = 1;
        }
    }
    NR == 2 {
        for (i = 1; i <= NF; i++) {
            if (i in update_cols_lookup) {
                if ($i % 2 == 0)
                    printf "string ";
                else
                    printf "integer ";
            }
        }
        exit;
    } ' $update_table.meta))
# echo "${update_column_types[@]}"

# loop and take user input for each column, check its data type
update_row=()

for ((i = 1; i <= $user_columns_number ; i++)); do
        while true; do         
                read -p "Enter ${update_columns_names[$((i - 1))]} column its datatype is ${update_column_types[$((i - 1))]} : " v
                # check inputs datatypes
                if [[ "${update_column_types[$((i - 1))]}" == "string" ]]; then
                        if [ $(check_name "$v") -eq "1" ]; then
                                echo "Error wrong data Type"
                                continue
                        fi
                elif [[ "${update_column_types[$((i - 1))]}" == "integer" ]]; then
                        if [ $(only_numbers "$v") -eq "1" ]; then
                                echo "Error wrong data Type"
                                continue
                        fi
                fi
        update_row+=("$v")
        break
        done
done
echo "row update values ${update_row[@]}"
echo "num string ${update_column_number_string[@]}"


# check if record exists or not
# does not exists , give error that there is not match to update
update_row_string=$(IFS=,; echo "${update_row[*]}")
echo "row update string ${update_row_string[@]}"

update_row_match=($(awk -F: -v update_cols_num="$update_column_number_string" -v update_row_col="$update_row_string" '
    BEGIN {
        split(update_cols_num, update_cols_num_array, ",");
        m = split(update_row_col, update_row_col_array, ",");
    }
    {
        match_count = 0;
        for (i = 1; i <= NF; i++) {
            for (j = 1; j <= m; j++) {
                if (i == update_cols_num_array[j] && $i == update_row_col_array[j]) {
                    match_count++;
                    break;  # No need to continue checking values
                }
            }
        }
        
        if (match_count == m) {
            printf("%d ", NR);  # Print the row number with a space after it
        }
    }
' $update_table))
echo "update row match ${update_row_match[@]}"

if (( ${#update_row_match[@]} == 0 )); then
    echo "NO Match found Ensure you Entered right data"
else
    echo "Match found"

fi

# if exists a match for columns specified, get row number 
# if it exists multiple times ?
# make loop for user input to what to update in the recoed
# make an comma sperated string to pass our array to awk


# check referencial integirty

