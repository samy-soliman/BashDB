## 
while true; do
        echo "Choose the Table You Want to Insert Into"
        read insert_table
        test_insert_table=$(check_name "$insert_table")
        if [ $test_insert_table -eq "1" ]; then
                echo "Naming Error please Enter only English Alphapet"; continue
        elif [ ! -f "$insert_table.db" ]; then
                echo "Table Does Not Exists!!!!"; continue
        else
                break
        fi
done

## getting table meta
# get the number of columns in table
columns_number=$(awk -F: '{ print NF; exit }' $insert_table.meta)
#echo "you table colnum is $columns_number"

# Populate the column_types array to check constrains 
column_types=($(awk -F: 'NR==2{
    for(i=1; i<=NF; i++) {
        if($i % 2 == 0)
            printf "string ";
        else
            printf "integer ";
    }
    exit
}' $insert_table.meta))

# Populate the Primary_columns array to fetch the pk_columns from table 
primary_columns=($(awk -F: 'NR==2 {
    for (i=1; i <= NF; i++) {
        if($i > 2) {
            printf "%d ", i;
        }
    }
    exit
}' "$insert_table.meta"))
# make a primary key index to gather values while inserting data
Primary_keys=($(awk -F: 'NR==2{
    for(i=1; i<=NF; i++) {
        if($i > 2) {
            printf "1 ";
        }
        else {
            printf "0 ";
        }
    }
    exit
}' "$insert_table.meta"))



##Output the arrays (optional, uncomment if you want to see the arrays)
#for ((i = 0; i < ${#column_types[@]}; i++)); do
#   echo "Column $((i+1)) type: ${column_types[i]}, Binary value: ${Primary_keys[i]} , Primary columns: ${primary_columns[i]}"
#done

# loop and take user input for each column, check its data type
row=()
pk=()

while true; do
        for ((i = 1; i <= $columns_number ; i++)); do
                while true; do         
                        read -p "Enter $i column its datatype is ${column_types[$((i - 1))]}: " v
                        # check inputs datatypes
                        if [[ "${column_types[$((i - 1))]}" == "string" ]]; then
                                if [ $(check_name "$v") -eq "1" ]; then
                                        echo "Error wrong data Type"
                                        continue
                                fi
                        elif [[ "${column_types[$((i - 1))]}" == "integer" ]]; then
                                if [ $(only_numbers "$v") -eq "1" ]; then
                                        echo "Error wrong data Type"
                                        continue
                                fi
                        fi
                        # check if input is a PK and save it in pk array
                        if [[ "${Primary_keys[$((i - 1))]}" == "1" ]]; then
                                pk+=("$v")
                        fi
                        
                row+=("$v")
                break
                done
        done
        # check inserted data does not vaulate PK constrains if so insert it in the table
        # check if there is no primary key to skip matching for one
        if (( ! ${#primary_columns[@]} == 0 )); then
        
        # make a temp file to compare data
        touch tempout
        tempcols="tempout"

        # Function to extract specified columns from the input file using cut
        extract_columns() {

        # Convert Primary_columns array to a comma-separated list for cut command
        columns=$(IFS=','; echo "${primary_columns[*]}")
        ## test the columns is correct
        #for ((i = 0; i < ${#columns[@]}; i++)); do
        #   echo "Column $((i+1)) value: ${columns[i]}"
        #done


        # Use cut command to extract the specified columns and save to the output file
        cut -d ':' -f "$columns" "$insert_table.db" > "$tempcols"
        }

        # Call the function to perform the extraction
        extract_columns

        # Step 1: Concatenate the "pk" array values with a colon.
        pk_value=$(IFS=":"; echo "${pk[*]}")

        # Step 2: Use awk to compare the "pk" value with each row in the file.
        found_match=$(awk -v pk="$pk_value" 'BEGIN { found = "NOMATCH" } $0 == pk { found = "MATCH"; exit } END { print found }' "$tempcols")
        rm $tempcols
        fi

        if [ "$found_match" == "MATCH" ]; then
        echo "ERROR Data already Exists with this primary key !!!"
        continue
        else
        echo "..................SUCCESS INERTING YOUR DATA.................."
        row_value=$(IFS=":"; echo "${row[*]}")
        echo "$row_value" >> $insert_table.db
        break
        fi

done

# Cleanig...
unset primary_columns
unset Primary_keys
unset row
unset pk
unset columns_number
unset column_types
